# Generated from SelectSQL.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,44,319,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,1,0,1,0,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
        1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,
        1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,
        1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,202,8,20,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        3,21,232,8,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,
        1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,
        1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,5,29,266,8,29,10,29,
        12,29,269,9,29,1,29,1,29,1,30,1,30,5,30,275,8,30,10,30,12,30,278,
        9,30,1,31,4,31,281,8,31,11,31,12,31,282,1,32,1,32,1,33,1,33,1,33,
        1,33,3,33,291,8,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,
        1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,4,43,
        314,8,43,11,43,12,43,315,1,43,1,43,1,267,0,44,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
        77,39,79,40,81,41,83,42,85,43,87,44,1,0,4,2,0,65,90,97,122,4,0,48,
        57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,332,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,
        0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,1,89,1,0,0,0,3,91,1,0,0,0,
        5,98,1,0,0,0,7,103,1,0,0,0,9,109,1,0,0,0,11,115,1,0,0,0,13,118,1,
        0,0,0,15,125,1,0,0,0,17,131,1,0,0,0,19,135,1,0,0,0,21,140,1,0,0,
        0,23,142,1,0,0,0,25,147,1,0,0,0,27,150,1,0,0,0,29,159,1,0,0,0,31,
        163,1,0,0,0,33,169,1,0,0,0,35,172,1,0,0,0,37,175,1,0,0,0,39,179,
        1,0,0,0,41,201,1,0,0,0,43,231,1,0,0,0,45,233,1,0,0,0,47,237,1,0,
        0,0,49,240,1,0,0,0,51,245,1,0,0,0,53,253,1,0,0,0,55,259,1,0,0,0,
        57,261,1,0,0,0,59,263,1,0,0,0,61,272,1,0,0,0,63,280,1,0,0,0,65,284,
        1,0,0,0,67,290,1,0,0,0,69,292,1,0,0,0,71,294,1,0,0,0,73,297,1,0,
        0,0,75,299,1,0,0,0,77,302,1,0,0,0,79,304,1,0,0,0,81,306,1,0,0,0,
        83,308,1,0,0,0,85,310,1,0,0,0,87,313,1,0,0,0,89,90,5,42,0,0,90,2,
        1,0,0,0,91,92,5,83,0,0,92,93,5,69,0,0,93,94,5,76,0,0,94,95,5,69,
        0,0,95,96,5,67,0,0,96,97,5,84,0,0,97,4,1,0,0,0,98,99,5,70,0,0,99,
        100,5,82,0,0,100,101,5,79,0,0,101,102,5,77,0,0,102,6,1,0,0,0,103,
        104,5,87,0,0,104,105,5,72,0,0,105,106,5,69,0,0,106,107,5,82,0,0,
        107,108,5,69,0,0,108,8,1,0,0,0,109,110,5,71,0,0,110,111,5,82,0,0,
        111,112,5,79,0,0,112,113,5,85,0,0,113,114,5,80,0,0,114,10,1,0,0,
        0,115,116,5,66,0,0,116,117,5,89,0,0,117,12,1,0,0,0,118,119,5,72,
        0,0,119,120,5,65,0,0,120,121,5,86,0,0,121,122,5,73,0,0,122,123,5,
        78,0,0,123,124,5,71,0,0,124,14,1,0,0,0,125,126,5,79,0,0,126,127,
        5,82,0,0,127,128,5,68,0,0,128,129,5,69,0,0,129,130,5,82,0,0,130,
        16,1,0,0,0,131,132,5,65,0,0,132,133,5,83,0,0,133,134,5,67,0,0,134,
        18,1,0,0,0,135,136,5,68,0,0,136,137,5,69,0,0,137,138,5,83,0,0,138,
        139,5,67,0,0,139,20,1,0,0,0,140,141,5,59,0,0,141,22,1,0,0,0,142,
        143,5,74,0,0,143,144,5,79,0,0,144,145,5,73,0,0,145,146,5,78,0,0,
        146,24,1,0,0,0,147,148,5,79,0,0,148,149,5,78,0,0,149,26,1,0,0,0,
        150,151,5,68,0,0,151,152,5,73,0,0,152,153,5,83,0,0,153,154,5,84,
        0,0,154,155,5,73,0,0,155,156,5,78,0,0,156,157,5,67,0,0,157,158,5,
        84,0,0,158,28,1,0,0,0,159,160,5,65,0,0,160,161,5,76,0,0,161,162,
        5,76,0,0,162,30,1,0,0,0,163,164,5,85,0,0,164,165,5,78,0,0,165,166,
        5,73,0,0,166,167,5,79,0,0,167,168,5,78,0,0,168,32,1,0,0,0,169,170,
        5,65,0,0,170,171,5,83,0,0,171,34,1,0,0,0,172,173,5,73,0,0,173,174,
        5,83,0,0,174,36,1,0,0,0,175,176,5,78,0,0,176,177,5,79,0,0,177,178,
        5,84,0,0,178,38,1,0,0,0,179,180,5,78,0,0,180,181,5,85,0,0,181,182,
        5,76,0,0,182,183,5,76,0,0,183,40,1,0,0,0,184,185,5,83,0,0,185,186,
        5,85,0,0,186,202,5,77,0,0,187,188,5,67,0,0,188,189,5,79,0,0,189,
        190,5,85,0,0,190,191,5,78,0,0,191,202,5,84,0,0,192,193,5,65,0,0,
        193,194,5,86,0,0,194,202,5,71,0,0,195,196,5,77,0,0,196,197,5,73,
        0,0,197,202,5,78,0,0,198,199,5,77,0,0,199,200,5,65,0,0,200,202,5,
        88,0,0,201,184,1,0,0,0,201,187,1,0,0,0,201,192,1,0,0,0,201,195,1,
        0,0,0,201,198,1,0,0,0,202,42,1,0,0,0,203,204,5,73,0,0,204,205,5,
        78,0,0,205,206,5,78,0,0,206,207,5,69,0,0,207,232,5,82,0,0,208,209,
        5,79,0,0,209,210,5,85,0,0,210,211,5,84,0,0,211,212,5,69,0,0,212,
        232,5,82,0,0,213,214,5,76,0,0,214,215,5,69,0,0,215,216,5,70,0,0,
        216,232,5,84,0,0,217,218,5,82,0,0,218,219,5,73,0,0,219,220,5,71,
        0,0,220,221,5,72,0,0,221,232,5,84,0,0,222,223,5,70,0,0,223,224,5,
        85,0,0,224,225,5,76,0,0,225,232,5,76,0,0,226,227,5,67,0,0,227,228,
        5,82,0,0,228,229,5,79,0,0,229,230,5,83,0,0,230,232,5,83,0,0,231,
        203,1,0,0,0,231,208,1,0,0,0,231,213,1,0,0,0,231,217,1,0,0,0,231,
        222,1,0,0,0,231,226,1,0,0,0,232,44,1,0,0,0,233,234,5,65,0,0,234,
        235,5,78,0,0,235,236,5,68,0,0,236,46,1,0,0,0,237,238,5,79,0,0,238,
        239,5,82,0,0,239,48,1,0,0,0,240,241,5,87,0,0,241,242,5,73,0,0,242,
        243,5,84,0,0,243,244,5,72,0,0,244,50,1,0,0,0,245,246,5,66,0,0,246,
        247,5,69,0,0,247,248,5,84,0,0,248,249,5,87,0,0,249,250,5,69,0,0,
        250,251,5,69,0,0,251,252,5,78,0,0,252,52,1,0,0,0,253,254,5,76,0,
        0,254,255,5,73,0,0,255,256,5,77,0,0,256,257,5,73,0,0,257,258,5,84,
        0,0,258,54,1,0,0,0,259,260,5,40,0,0,260,56,1,0,0,0,261,262,5,41,
        0,0,262,58,1,0,0,0,263,267,5,39,0,0,264,266,9,0,0,0,265,264,1,0,
        0,0,266,269,1,0,0,0,267,268,1,0,0,0,267,265,1,0,0,0,268,270,1,0,
        0,0,269,267,1,0,0,0,270,271,5,39,0,0,271,60,1,0,0,0,272,276,7,0,
        0,0,273,275,7,1,0,0,274,273,1,0,0,0,275,278,1,0,0,0,276,274,1,0,
        0,0,276,277,1,0,0,0,277,62,1,0,0,0,278,276,1,0,0,0,279,281,7,2,0,
        0,280,279,1,0,0,0,281,282,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,
        0,283,64,1,0,0,0,284,285,5,61,0,0,285,66,1,0,0,0,286,287,5,60,0,
        0,287,291,5,62,0,0,288,289,5,33,0,0,289,291,5,61,0,0,290,286,1,0,
        0,0,290,288,1,0,0,0,291,68,1,0,0,0,292,293,5,60,0,0,293,70,1,0,0,
        0,294,295,5,60,0,0,295,296,5,61,0,0,296,72,1,0,0,0,297,298,5,62,
        0,0,298,74,1,0,0,0,299,300,5,62,0,0,300,301,5,61,0,0,301,76,1,0,
        0,0,302,303,5,44,0,0,303,78,1,0,0,0,304,305,5,46,0,0,305,80,1,0,
        0,0,306,307,5,38,0,0,307,82,1,0,0,0,308,309,5,124,0,0,309,84,1,0,
        0,0,310,311,5,34,0,0,311,86,1,0,0,0,312,314,7,3,0,0,313,312,1,0,
        0,0,314,315,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,317,1,0,
        0,0,317,318,6,43,0,0,318,88,1,0,0,0,8,0,201,231,267,276,282,290,
        315,1,6,0,0
    ]

class SelectSQLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ASTERISK = 1
    SELECT = 2
    FROM = 3
    WHERE = 4
    GROUP = 5
    BY = 6
    HAVING = 7
    ORDER = 8
    ASC = 9
    DESC = 10
    SEMICOLON = 11
    JOIN = 12
    ON = 13
    DISTINCT = 14
    ALL = 15
    UNION = 16
    AS = 17
    IS = 18
    NOT = 19
    NULL = 20
    AGGREGATE = 21
    JOIN_TYPE = 22
    AND = 23
    OR = 24
    WITH = 25
    BETWEEN = 26
    LIMIT = 27
    LPAREN = 28
    RPAREN = 29
    STRING = 30
    IDENTIFIER = 31
    NUMBER = 32
    EQ = 33
    NE = 34
    LT = 35
    LTE = 36
    GT = 37
    GTE = 38
    COMMA = 39
    DOT = 40
    AMP = 41
    PIPE = 42
    QT = 43
    WS = 44

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'*'", "'SELECT'", "'FROM'", "'WHERE'", "'GROUP'", "'BY'", "'HAVING'", 
            "'ORDER'", "'ASC'", "'DESC'", "';'", "'JOIN'", "'ON'", "'DISTINCT'", 
            "'ALL'", "'UNION'", "'AS'", "'IS'", "'NOT'", "'NULL'", "'AND'", 
            "'OR'", "'WITH'", "'BETWEEN'", "'LIMIT'", "'('", "')'", "'='", 
            "'<'", "'<='", "'>'", "'>='", "','", "'.'", "'&'", "'|'", "'\"'" ]

    symbolicNames = [ "<INVALID>",
            "ASTERISK", "SELECT", "FROM", "WHERE", "GROUP", "BY", "HAVING", 
            "ORDER", "ASC", "DESC", "SEMICOLON", "JOIN", "ON", "DISTINCT", 
            "ALL", "UNION", "AS", "IS", "NOT", "NULL", "AGGREGATE", "JOIN_TYPE", 
            "AND", "OR", "WITH", "BETWEEN", "LIMIT", "LPAREN", "RPAREN", 
            "STRING", "IDENTIFIER", "NUMBER", "EQ", "NE", "LT", "LTE", "GT", 
            "GTE", "COMMA", "DOT", "AMP", "PIPE", "QT", "WS" ]

    ruleNames = [ "ASTERISK", "SELECT", "FROM", "WHERE", "GROUP", "BY", 
                  "HAVING", "ORDER", "ASC", "DESC", "SEMICOLON", "JOIN", 
                  "ON", "DISTINCT", "ALL", "UNION", "AS", "IS", "NOT", "NULL", 
                  "AGGREGATE", "JOIN_TYPE", "AND", "OR", "WITH", "BETWEEN", 
                  "LIMIT", "LPAREN", "RPAREN", "STRING", "IDENTIFIER", "NUMBER", 
                  "EQ", "NE", "LT", "LTE", "GT", "GTE", "COMMA", "DOT", 
                  "AMP", "PIPE", "QT", "WS" ]

    grammarFileName = "SelectSQL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


